import os
import random
import json
import asyncio
from collections import defaultdict
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes, CallbackQueryHandler
)

load_dotenv()

with open("cards.json", "r", encoding="utf-8") as f:
    cards = json.load(f)

games = {}  # chat_id -> game data

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Å—Ç–∞—Ä—Ç–∞
def start_buttons(chat_id):
    if chat_id in games:
        game = games[chat_id]
        if game["started"]:
            return InlineKeyboardMarkup([[InlineKeyboardButton("–ò–≥—Ä–∞ –∏–¥—ë—Ç", callback_data="noop")]])
        else:
            buttons = [
                [InlineKeyboardButton("–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", callback_data="join_game")]
            ]
            # –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å –∏–≥—Ä—É
            if game.get("creator_id"):
                buttons.append([InlineKeyboardButton("–ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data="begin_game")])
            return InlineKeyboardMarkup(buttons)
    else:
        return InlineKeyboardMarkup([[InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É", callback_data="create_game")]])

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî *Bunker Bot*, –∫–∞—Ä—Ç–æ—á–Ω–∞—è –∏–≥—Ä–∞ –Ω–∞ –≤—ã–∂–∏–≤–∞–Ω–∏–µ.\n\n"
        "üéØ –¶–µ–ª—å ‚Äî –ø–æ–ø–∞—Å—Ç—å –≤ –±—É–Ω–∫–µ—Ä, –≥–¥–µ 2 –º–µ—Å—Ç–∞.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–π.",
        reply_markup=start_buttons(chat_id),
        parse_mode="Markdown"
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user = query.from_user
    chat_id = update.effective_chat.id if update.effective_chat else None

    data = query.data

    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è noop
    if data == "noop":
        await query.answer()
        return

    if data == "create_game":
        if chat_id in games and games[chat_id].get("started"):
            await query.answer("–ò–≥—Ä–∞ —É–∂–µ –∏–¥—ë—Ç!")
            return
        games[chat_id] = {
            "players": [],
            "started": False,
            "round": 0,
            "revealed": {},
            "cards_data": {},
            "votes": defaultdict(set),
            "task": None,
            "voting_task": None,
            "creator_id": user.id,
        }
        await query.message.edit_text(
            "üé≤ –ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞! –ù–∞–∂–º–∏—Ç–µ '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è', —á—Ç–æ–±—ã –≤—Å—Ç—É–ø–∏—Ç—å.\n"
            "–î–ª—è —Å—Ç–∞—Ä—Ç–∞ –∏–≥—Ä—ã –Ω–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É' (—Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å).",
            reply_markup=start_buttons(chat_id)
        )
        await query.answer("–ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞!")
        return

    if data == "join_game":
        if chat_id not in games:
            await query.answer("–ò–≥—Ä–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞, –Ω–∞–∂–º–∏—Ç–µ '–°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É'.")
            return

        if user.id in games[chat_id]["players"]:
            await query.answer("–í—ã —É–∂–µ –≤ –∏–≥—Ä–µ!")
            return

        if games[chat_id]["started"]:
            await query.answer("–ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å, –Ω–µ–ª—å–∑—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è.")
            return

        games[chat_id]["players"].append(user.id)
        await query.answer("–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ!")
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏ —Å–ø–∏—Å–∫–æ–º –∏–≥—Ä–æ–∫–æ–≤
        player_names = []
        for pid in games[chat_id]["players"]:
            try:
                member = await context.bot.get_chat_member(chat_id, pid)
                player_names.append(member.user.first_name)
            except:
                player_names.append("–ò–≥—Ä–æ–∫")

        await query.message.edit_text(
            "üé≤ –ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞!\n\n–ò–≥—Ä–æ–∫–∏:\n- " + "\n- ".join(player_names) + "\n\n"
            "–ù–∞–∂–º–∏—Ç–µ '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è', —á—Ç–æ–±—ã –≤—Å—Ç—É–ø–∏—Ç—å.\n"
            "–î–ª—è —Å—Ç–∞—Ä—Ç–∞ –∏–≥—Ä—ã –Ω–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É' (—Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å).",
            reply_markup=start_buttons(chat_id)
        )
        # –ï—Å–ª–∏ –Ω–∞–±—Ä–∞–ª–æ—Å—å 15, –∑–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        if len(games[chat_id]["players"]) >= 15:
            await begin_game(chat_id, context)
            await query.message.edit_text("üéâ –ù–∞–±—Ä–∞–Ω–æ 15 –∏–≥—Ä–æ–∫–æ–≤! –ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è.")
        return

    if data == "begin_game":
        if chat_id not in games:
            await query.answer("–ò–≥—Ä–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞.")
            return
        if user.id != games[chat_id]["creator_id"]:
            await query.answer("–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏–≥—Ä—ã –º–æ–∂–µ—Ç –µ—ë –Ω–∞—á–∞—Ç—å.")
            return
        if games[chat_id]["started"]:
            await query.answer("–ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å.")
            return
        if len(games[chat_id]["players"]) < 5:
            await query.answer("–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 5 –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞.")
            return
        await query.answer("–ò–≥—Ä–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è!")
        await begin_game(chat_id, context)
        await query.message.edit_text("üÉè –ö–∞—Ä—Ç–æ—á–∫–∏ —Ä–æ–∑–¥–∞–Ω—ã! –ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è.\n–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞—É–Ω–¥–∞ –Ω–∞–∂–º–∏—Ç–µ /startround")
        return

    # –î–∞–ª–µ–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è reveal_, vote_ –∏ –¥—Ä. (–æ—Å—Ç–∞–≤–∏–º —Ç–µ–∫—É—â—É—é –ª–æ–≥–∏–∫—É)

    if chat_id not in games:
        await query.answer("–ò–≥—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.")
        return

    if data.startswith("reveal_"):
        card_type = data[len("reveal_"):]
        player_id = user.id

        if player_id not in games[chat_id]["players"]:
            await query.answer("–í—ã –Ω–µ –≤ –∏–≥—Ä–µ!")
            return

        revealed = games[chat_id]["revealed"].setdefault(player_id, [])
        if len(revealed) >= 2:
            await query.answer("–í—ã —É–∂–µ –ø–æ–∫–∞–∑–∞–ª–∏ 2 –∫–∞—Ä—Ç—ã!")
            return

        if card_type in revealed:
            await query.answer("–í—ã —É–∂–µ –ø–æ–∫–∞–∑–∞–ª–∏ —ç—Ç—É –∫–∞—Ä—Ç—É!")
            return

        revealed.append(card_type)
        await query.answer(f"–í—ã –ø–æ–∫–∞–∑–∞–ª–∏ –∫–∞—Ä—Ç—É: {card_type.capitalize()}")

        if len(revealed) == 1:
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–∫–∞–∑–∞—Ç—å –≤—Ç–æ—Ä—É—é –∫–∞—Ä—Ç—É
            await context.bot.send_message(player_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ç–æ—Ä—É—é –∫–∞—Ä—Ç—É –∏–ª–∏ /skip, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:", reply_markup=get_card_buttons(exclude=revealed))
        else:
            await context.bot.send_message(player_id, "–í—ã –ø–æ–∫–∞–∑–∞–ª–∏ 2 –∫–∞—Ä—Ç—ã, –∂–¥–∏—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞—É–Ω–¥–∞.")

        return

    if data.startswith("vote_"):
        target_id = int(data[len("vote_"):])
        voter_id = user.id

        if voter_id not in games[chat_id]["players"]:
            await query.answer("–í—ã –Ω–µ –≤ –∏–≥—Ä–µ!")
            return

        if target_id not in games[chat_id]["players"]:
            await query.answer("–≠—Ç–æ—Ç –∏–≥—Ä–æ–∫ –Ω–µ –≤ –∏–≥—Ä–µ.")
            return

        if target_id == voter_id:
            await query.answer("–ù–µ–ª—å–∑—è –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ —Å–µ–±—è!")
            return

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≥–æ–ª–æ—Å–∞ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for voters in games[chat_id]["votes"].values():
            voters.discard(voter_id)
        games[chat_id]["votes"][target_id].add(voter_id)
        await query.answer("–í—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞.")
        return

async def begin_game(chat_id, context: ContextTypes.DEFAULT_TYPE):
    games[chat_id]["started"] = True
    games[chat_id]["round"] = 0
    games[chat_id]["revealed"] = {}
    games[chat_id]["cards_data"] = {}
    games[chat_id]["votes"] = defaultdict(set)
    players = games[chat_id]["players"]
    random.shuffle(players)

    for player_id in players:
        card = {
            "profession": random.choice(cards["professions"]),
            "age": random.choice(cards["ages"]),
            "health": random.choice(cards["healths"]),
            "hobby": random.choice(cards["hobbies"]),
            "baggage": random.choice(cards["baggages"]),
            "secret": random.choice(cards["secrets"]),
        }
        games[chat_id]["cards_data"][player_id] = card
        try:
            await context.bot.send_message(
                chat_id=player_id,
                text=(
                    "üé¥ –í–∞—à–∞ –∫–∞—Ä—Ç–æ—á–∫–∞:\n"
                    f"üë®‚Äçüîß –ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {card['profession']}\n"
                    f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {card['age']}\n"
                    f"‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: {card['health']}\n"
                    f"üé® –•–æ–±–±–∏: {card['hobby']}\n"
                    f"üéí –ë–∞–≥–∞–∂: {card['baggage']}\n"
                    f"üïµÔ∏è –°–µ–∫—Ä–µ—Ç: {card['secret']}\n"
                )
            )
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {player_id}: {e}")

    await context.bot.send_message(chat_id, "üÉè –ö–∞—Ä—Ç–æ—á–∫–∏ —Ä–æ–∑–¥–∞–Ω—ã! –ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è.\n"
                                           "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞—É–Ω–¥, –Ω–∞–ø–∏—à–∏—Ç–µ /startround")

def get_card_buttons(exclude=[]):
    options = ["profession", "hobby", "secret", "age", "baggage", "health"]
    buttons = []
    for opt in options:
        if opt not in exclude:
            buttons.append([InlineKeyboardButton(opt.capitalize(), callback_data=f"reveal_{opt}")])
    return InlineKeyboardMarkup(buttons)

# –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ—Å—Ç–∞–≤–ª—è–µ–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π (startround, voting, skip_second_card, get_player_name, main –∏ —Ç.–ø.)

def main():
    token = os.getenv("TELEGRAM_BOT_TOKEN")
    if not token:
        print("–û—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
        return

    app = ApplicationBuilder().token(token).build()

    app.add_handler(CommandHandler("start", start))
    # –£–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—ã startgame, join –∏ startround –∏–∑ —á–∞—Ç-–≥—Ä—É–ø–ø—ã, –æ—Å—Ç–∞–≤–∏–º —Ç–æ–ª—å–∫–æ /start –∏ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –≤—Ç–æ—Ä–æ–π –∫–∞—Ä—Ç—ã
    app.add_handler(CommandHandler("skip", skip_second_card))
    app.add_handler(CallbackQueryHandler(button_handler))

    print("Bunker bot –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    app.run_polling()

if __name__ == "__main__":
    main()
