import os
import random
import json
import asyncio
from collections import defaultdict
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes, CallbackQueryHandler
)
from telegram.constants import ParseMode

load_dotenv()

with open("cards.json", "r", encoding="utf-8") as f:
    cards = json.load(f)

games = {}  # chat_id -> game data

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã *–ü—Ä–∏–≤–µ—Ç!*\n\n"
        "_–Ø ‚Äî Bunker Bot, –∫–∞—Ä—Ç–æ—á–Ω–∞—è –∏–≥—Ä–∞ –Ω–∞ –≤—ã–∂–∏–≤–∞–Ω–∏–µ._\n\n"
        "üéØ *–¶–µ–ª—å* ‚Äî –ø–æ–ø–∞—Å—Ç—å –≤ –±—É–Ω–∫–µ—Ä, –≥–¥–µ –≤—Å–µ–≥–æ 2 –º–µ—Å—Ç–∞.\n"
        "üöÄ –ù–∞–ø–∏—à–∏ /startgame –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
        parse_mode=ParseMode.MARKDOWN
    )

async def startgame(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id in games and games[chat_id].get("started"):
        await update.message.reply_text("–ò–≥—Ä–∞ —É–∂–µ –∏–¥—ë—Ç!")
        return

    games[chat_id] = {
        "players": [],
        "started": False,
        "round": 0,
        "revealed": {},
        "cards_data": {},
        "votes": defaultdict(set),
        "task": None,
        "voting_task": None,
    }

    await update.message.reply_text(
        "üé≤ *–ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞!*\n"
        "–ò–≥—Ä–æ–∫–∏, –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /join\n"
        "‚è≥ –ò–≥—Ä–∞ –Ω–∞—á–Ω—ë—Ç—Å—è —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥ –∏–ª–∏ —Å—Ä–∞–∑—É, –µ—Å–ª–∏ –Ω–∞–±–µ—Ä—ë—Ç—Å—è 15 –∏–≥—Ä–æ–∫–æ–≤.",
        parse_mode=ParseMode.MARKDOWN
    )

    async def wait_and_start():
        await asyncio.sleep(60)
        if chat_id not in games:
            return
        if len(games[chat_id]["players"]) < 5:
            await context.bot.send_message(chat_id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 5). –ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            del games[chat_id]
        else:
            await begin_game(chat_id, context)

    games[chat_id]["task"] = asyncio.create_task(wait_and_start())

async def join(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user = update.effective_user

    if chat_id not in games:
        await update.message.reply_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /startgame")
        return
    if user.id in games[chat_id]["players"]:
        await update.message.reply_text("–í—ã —É–∂–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å!")
        return

    games[chat_id]["players"].append(user.id)
    await update.message.reply_text(f"‚úÖ *{user.first_name}* –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ!", parse_mode=ParseMode.MARKDOWN)

    if len(games[chat_id]["players"]) == 15:
        await context.bot.send_message(chat_id, "üéâ –ù–∞–±—Ä–∞–Ω–æ 15 –∏–≥—Ä–æ–∫–æ–≤! –ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è.")
        if games[chat_id]["task"]:
            games[chat_id]["task"].cancel()
        await begin_game(chat_id, context)

async def begin_game(chat_id, context: ContextTypes.DEFAULT_TYPE):
    games[chat_id]["started"] = True
    games[chat_id]["round"] = 0
    games[chat_id]["revealed"] = {}
    games[chat_id]["cards_data"] = {}
    games[chat_id]["votes"] = defaultdict(set)
    players = games[chat_id]["players"]
    random.shuffle(players)

    for player_id in players:
        card = {
            "profession": random.choice(cards["professions"]),
            "age": random.choice(cards["ages"]),
            "health": random.choice(cards["healths"]),
            "hobby": random.choice(cards["hobbies"]),
            "baggage": random.choice(cards["baggages"]),
            "secret": random.choice(cards["secrets"]),
        }
        games[chat_id]["cards_data"][player_id] = card
        try:
            await context.bot.send_message(
                chat_id=player_id,
                text=(
                    "üé¥ *–í–∞—à–∞ –∫–∞—Ä—Ç–æ—á–∫–∞:*\n"
                    f"üë®‚Äçüîß *–ü—Ä–æ—Ñ–µ—Å—Å–∏—è:* {card['profession']}\n"
                    f"üéÇ *–í–æ–∑—Ä–∞—Å—Ç:* {card['age']}\n"
                    f"‚ù§Ô∏è *–ó–¥–æ—Ä–æ–≤—å–µ:* {card['health']}\n"
                    f"üé® *–•–æ–±–±–∏:* {card['hobby']}\n"
                    f"üéí *–ë–∞–≥–∞–∂:* {card['baggage']}\n"
                    f"üïµÔ∏è *–°–µ–∫—Ä–µ—Ç:* {card['secret']}\n"
                ),
                parse_mode=ParseMode.MARKDOWN,
            )
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {player_id}: {e}")

    await context.bot.send_message(chat_id, "üÉè *–ö–∞—Ä—Ç–æ—á–∫–∏ —Ä–æ–∑–¥–∞–Ω—ã! –ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è.*\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞—É–Ω–¥, –Ω–∞–ø–∏—à–∏—Ç–µ /startround", parse_mode=ParseMode.MARKDOWN)

def get_card_buttons(exclude=[]):
    options = [
        ("profession", "üë®‚Äçüîß –ü—Ä–æ—Ñ–µ—Å—Å–∏—è"),
        ("hobby", "üé® –•–æ–±–±–∏"),
        ("secret", "üïµÔ∏è –°–µ–∫—Ä–µ—Ç"),
        ("age", "üéÇ –í–æ–∑—Ä–∞—Å—Ç"),
        ("baggage", "üéí –ë–∞–≥–∞–∂"),
        ("health", "‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ"),
    ]
    buttons = []
    for key, label in options:
        if key not in exclude:
            buttons.append([InlineKeyboardButton(label, callback_data=f"reveal_{key}")])
    return InlineKeyboardMarkup(buttons)

async def startround(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id

    if chat_id not in games or not games[chat_id]["started"]:
        await update.message.reply_text("–ò–≥—Ä–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞, —Å–æ–∑–¥–∞–π—Ç–µ –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /startgame")
        return

    if len(games[chat_id]["players"]) <= 2:
        await update.message.reply_text("–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –í –±—É–Ω–∫–µ—Ä –ø–æ–ø–∞–ª–∏ 2 –∏–≥—Ä–æ–∫–∞.")
        await show_winners(chat_id, context)
        del games[chat_id]
        return

    games[chat_id]["round"] += 1
    games[chat_id]["revealed"] = {}
    games[chat_id]["votes"] = defaultdict(set)

    players = games[chat_id]["players"]
    for player_id in players:
        try:
            await context.bot.send_message(
                chat_id=player_id,
                text=f"–†–∞—É–Ω–¥ *{games[chat_id]['round']}!*\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç—É –¥–ª—è –ø–æ–∫–∞–∑–∞:",
                reply_markup=get_card_buttons(),
                parse_mode=ParseMode.MARKDOWN,
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç {player_id}: {e}")

    await update.message.reply_text(f"–†–∞—É–Ω–¥ *{games[chat_id]['round']}* –Ω–∞—á–∞–ª—Å—è! –ò–≥—Ä–æ–∫–∏ –≤—ã–±–∏—Ä–∞—é—Ç –∫–∞—Ä—Ç—ã.", parse_mode=ParseMode.MARKDOWN)
    asyncio.create_task(round_timer(chat_id, context))

async def round_timer(chat_id, context):
    await asyncio.sleep(60)
    if chat_id not in games:
        return

    revealed = games[chat_id]["revealed"]
    cards_data = games[chat_id]["cards_data"]
    players = games[chat_id]["players"]

    text = f"‚è∞ –†–∞—É–Ω–¥ *{games[chat_id]['round']}* –∑–∞–≤–µ—Ä—à—ë–Ω! –í–æ—Ç —Ä–∞—Å–∫—Ä—ã—Ç—ã–µ –∫–∞—Ä—Ç—ã:\n\n"
    for pid in players:
        if pid in revealed:
            cards_shown = revealed[pid]
            card_texts = []
            for c in cards_shown:
                val = cards_data[pid].get(c, "???")
                card_texts.append(f"*{c.capitalize()}*: {val}")
            player_name = await get_player_name(pid, context)
            text += f"üë§ *{player_name}*:\n" + "\n".join(card_texts) + "\n\n"
        else:
            player_name = await get_player_name(pid, context)
            text += f"üë§ *{player_name}*: –Ω–µ –ø–æ–∫–∞–∑–∞–ª –∫–∞—Ä—Ç—ã\n\n"

    await context.bot.send_message(chat_id, text, parse_mode=ParseMode.MARKDOWN)
    await start_voting(chat_id, context)

async def start_voting(chat_id, context: ContextTypes.DEFAULT_TYPE):
    if chat_id not in games:
        return
    players = games[chat_id]["players"]
    if len(players) <= 2:
        await context.bot.send_message(chat_id, "–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –û—Å—Ç–∞–ª–æ—Å—å 2 –∏–≥—Ä–æ–∫–∞.")
        await show_winners(chat_id, context)
        del games[chat_id]
        return

    buttons = []
    for pid in players:
        player_name = await get_player_name(pid, context)
        buttons.append([InlineKeyboardButton(f"üö™ {player_name}", callback_data=f"vote_{pid}")])

    keyboard = InlineKeyboardMarkup(buttons)

    await context.bot.send_message(
        chat_id,
        "üó≥Ô∏è *–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ:* –≤—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∏—Å–∫–ª—é—á–∏—Ç—å –∏–∑ –∏–≥—Ä—ã.",
        reply_markup=keyboard,
        parse_mode=ParseMode.MARKDOWN,
    )

    if games[chat_id]["voting_task"]:
        games[chat_id]["voting_task"].cancel()
    games[chat_id]["voting_task"] = asyncio.create_task(voting_timer(chat_id, context))

async def voting_timer(chat_id, context):
    await asyncio.sleep(30)
    if chat_id not in games:
        return
    await end_voting(chat_id, context)

async def end_voting(chat_id, context):
    votes = games[chat_id]["votes"]
    if not votes:
        await context.bot.send_message(chat_id, "–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–µ —Å–æ—Å—Ç–æ—è–ª–æ—Å—å ‚Äî –Ω–∏–∫—Ç–æ –Ω–µ –∏—Å–∫–ª—é—á—ë–Ω.")
        await startround_intern(chat_id, context)
        return

    vote_counts = {player: len(voters) for player, voters in votes.items()}
    max_votes = max(vote_counts.values())
    candidates = [p for p, c in vote_counts.items() if c == max_votes]

    if len(candidates) > 1:
        await context.bot.send_message(chat_id, "–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å –Ω–∏—á—å–µ–π ‚Äî –Ω–∏–∫—Ç–æ –Ω–µ –∏—Å–∫–ª—é—á—ë–Ω.")
        await startround_intern(chat_id, context)
        return

    excluded = candidates[0]
    player_name = await get_player_name(excluded, context)

    games[chat_id]["players"].remove(excluded)
    del games[chat_id]["cards_data"][excluded]
    if excluded in games[chat_id]["revealed"]:
        del games[chat_id]["revealed"][excluded]
    if excluded in games[chat_id]["votes"]:
        del games[chat_id]["votes"][excluded]

    await context.bot.send_message(chat_id, f"üö™ –ò–≥—Ä–æ–∫ *{player_name}* –∏—Å–∫–ª—é—á—ë–Ω –∏–∑ –∏–≥—Ä—ã.", parse_mode=ParseMode.MARKDOWN)

    if len(games[chat_id]["players"]) <= 2:
        await context.bot.send_message(chat_id, "–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –û—Å—Ç–∞–ª–æ—Å—å 2 –∏–≥—Ä–æ–∫–∞.")
        await show_winners(chat_id, context)
        del games[chat_id]
        return

    await startround_intern(chat_id, context)

async def startround_intern(chat_id, context):
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    games[chat_id]["round"] += 1
    games[chat_id]["revealed"] = {}
    games[chat_id]["votes"] = defaultdict(set)

    players = games[chat_id]["players"]
    for player_id in players:
        try:
            await context.bot.send_message(
                chat_id=player_id,
                text=f"–†–∞—É–Ω–¥ *{games[chat_id]['round']}!*\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç—É –¥–ª—è –ø–æ–∫–∞–∑–∞:",
                reply_markup=get_card_buttons(),
                parse_mode=ParseMode.MARKDOWN,
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç {player_id}: {e}")

    await context.bot.send_message(chat_id, f"–†–∞—É–Ω–¥ *{games[chat_id]['round']}* –Ω–∞—á–∞–ª—Å—è! –ò–≥—Ä–æ–∫–∏ –≤—ã–±–∏—Ä–∞—é—Ç –∫–∞—Ä—Ç—ã.", parse_mode=ParseMode.MARKDOWN)
    asyncio.create_task(round_timer(chat_id, context))

async def get_player_name(user_id, context):
    try:
        user = await context.bot.get_chat(user_id)
        return user.first_name
    except:
        return "–ò–≥—Ä–æ–∫"

async def show_winners(chat_id, context):
    players = games[chat_id]["players"]
    text = "üéâ *–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏:*\n"
    for pid in players:
        name = await get_player_name(pid, context)
        text += f"üë§ {name}\n"
    await context.bot.send_message(chat_id, text, parse_mode=ParseMode.MARKDOWN)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    user_id = query.from_user.id
    chat_id = query.message.chat.id

    if chat_id not in games:
        await query.edit_message_text("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –∑–∞–∫–æ–Ω—á–µ–Ω–∞.")
        return

    if data.startswith("reveal_"):
        card_key = data[len("reveal_"):]
        if user_id not in games[chat_id]["players"]:
            await query.answer("–í—ã –Ω–µ –≤ –∏–≥—Ä–µ!", show_alert=True)
            return

        if user_id not in games[chat_id]["revealed"]:
            games[chat_id]["revealed"][user_id] = []

        if card_key in games[chat_id]["revealed"][user_id]:
            await query.answer("–≠—Ç—É –∫–∞—Ä—Ç—É —É–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞–ª–∏", show_alert=True)
            return

        games[chat_id]["revealed"][user_id].append(card_key)

        card_value = games[chat_id]["cards_data"][user_id].get(card_key, "???")
        await query.edit_message_text(
            f"–í—ã –ø–æ–∫–∞–∑–∞–ª–∏ –∫–∞—Ä—Ç—É *{card_key.capitalize()}*: {card_value}",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=get_card_buttons(exclude=games[chat_id]["revealed"][user_id])
        )
    elif data.startswith("vote_"):
        voted_id = int(data[len("vote_"):])
        if user_id not in games[chat_id]["players"]:
            await query.answer("–í—ã –Ω–µ –≤ –∏–≥—Ä–µ!", show_alert=True)
            return
        if voted_id == user_id:
            await query.answer("–ù–µ–ª—å–∑—è –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ —Å–µ–±—è!", show_alert=True)
            return

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≥–æ–ª–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for voters in games[chat_id]["votes"].values():
            voters.discard(user_id)

        games[chat_id]["votes"][voted_id].add(user_id)
        voted_name = await get_player_name(voted_id, context)
        await query.answer(f"–í—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ {voted_name}")

async def main():
    TOKEN = os.getenv("TOKEN")
    application = ApplicationBuilder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("startgame", startgame))
    application.add_handler(CommandHandler("join", join))
    application.add_handler(CommandHandler("startround", startround))
    application.add_handler(CallbackQueryHandler(button_handler))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await application.run_polling()

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
