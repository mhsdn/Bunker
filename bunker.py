import os
import random
import json
import asyncio
from collections import defaultdict
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes, CallbackQueryHandler
)

load_dotenv()

with open("cards.json", "r", encoding="utf-8") as f:
    cards = json.load(f)

games = {}  # chat_id -> game data

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üõ°Ô∏è *Bunker Bot* ‚Äî –∫–∞—Ä—Ç–æ—á–Ω–∞—è –∏–≥—Ä–∞ –Ω–∞ –≤—ã–∂–∏–≤–∞–Ω–∏–µ!\n\n"
        "üéØ –¶–µ–ª—å: –ø–æ–ø–∞—Å—Ç—å –≤ –±—É–Ω–∫–µ—Ä, –≥–¥–µ –≤—Å–µ–≥–æ 2 –º–µ—Å—Ç–∞.\n"
        "üë• –ù–∞—á–∞—Ç—å –∏–≥—Ä—É: /startgame (–≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ)\n"
        "‚úã –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è: /join\n\n"
        "üï∞Ô∏è –ò–≥—Ä–∞ –Ω–∞—á–Ω—ë—Ç—Å—è, –∫–æ–≥–¥–∞ —Å–æ–±–µ—Ä—ë—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞ (–º–∏–Ω. 5 –∏–≥—Ä–æ–∫–æ–≤) –∏–ª–∏ —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥.",
        parse_mode="Markdown"
    )

async def startgame(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id in games and games[chat_id].get("started"):
        await update.message.reply_text("‚ö†Ô∏è –ò–≥—Ä–∞ —É–∂–µ –∏–¥—ë—Ç!")
        return

    games[chat_id] = {
        "players": [],
        "started": False,
        "round": 0,
        "revealed": {},
        "cards_data": {},
        "votes": defaultdict(set),
        "task": None,
        "voting_task": None,
    }

    await update.message.reply_text(
        "üé≤ *–ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞!*\n\n"
        "üë• –ò–≥—Ä–æ–∫–∏, –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /join\n"
        "‚è≥ –ò–≥—Ä–∞ –Ω–∞—á–Ω—ë—Ç—Å—è —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥ –∏–ª–∏ –∫–æ–≥–¥–∞ –Ω–∞–±–µ—Ä—ë—Ç—Å—è 15 –∏–≥—Ä–æ–∫–æ–≤.",
        parse_mode="Markdown"
    )

    async def wait_and_start():
        await asyncio.sleep(60)
        if chat_id not in games:
            return
        if len(games[chat_id]["players"]) < 5:
            await context.bot.send_message(chat_id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ (–º–∏–Ω–∏–º—É–º 5). –ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            del games[chat_id]
        else:
            await begin_game(chat_id, context)

    games[chat_id]["task"] = asyncio.create_task(wait_and_start())

async def join(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user = update.effective_user

    if chat_id not in games:
        await update.message.reply_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /startgame")
        return
    if user.id in games[chat_id]["players"]:
        await update.message.reply_text("‚úã –í—ã —É–∂–µ –≤ –∏–≥—Ä–µ!")
        return

    games[chat_id]["players"].append(user.id)
    await update.message.reply_text(f"‚úÖ *{user.first_name}* –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ!", parse_mode="Markdown")

    if len(games[chat_id]["players"]) == 15:
        await context.bot.send_message(chat_id, "üéâ –°–æ–±—Ä–∞–Ω–æ 15 –∏–≥—Ä–æ–∫–æ–≤! –ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è.")
        if games[chat_id]["task"]:
            games[chat_id]["task"].cancel()
        await begin_game(chat_id, context)

async def begin_game(chat_id, context: ContextTypes.DEFAULT_TYPE):
    games[chat_id]["started"] = True
    games[chat_id]["round"] = 0
    games[chat_id]["revealed"] = {}
    games[chat_id]["cards_data"] = {}
    games[chat_id]["votes"] = defaultdict(set)
    players = games[chat_id]["players"]
    random.shuffle(players)

    for player_id in players:
        card = {
            "profession": random.choice(cards["professions"]),
            "age": random.choice(cards["ages"]),
            "health": random.choice(cards["healths"]),
            "hobby": random.choice(cards["hobbies"]),
            "baggage": random.choice(cards["baggages"]),
            "secret": random.choice(cards["secrets"]),
        }
        games[chat_id]["cards_data"][player_id] = card
        try:
            await context.bot.send_message(
                chat_id=player_id,
                text=(
                    "üé¥ *–í–∞—à–∞ –∫–∞—Ä—Ç–æ—á–∫–∞:*\n"
                    f"üë∑‚Äç‚ôÇÔ∏è –ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {card['profession']}\n"
                    f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {card['age']}\n"
                    f"‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: {card['health']}\n"
                    f"üé® –•–æ–±–±–∏: {card['hobby']}\n"
                    f"üéí –ë–∞–≥–∞–∂: {card['baggage']}\n"
                    f"üïµÔ∏è –°–µ–∫—Ä–µ—Ç: {card['secret']}"
                ),
                parse_mode="Markdown"
            )
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {player_id}: {e}")

    await context.bot.send_message(chat_id, "üÉè –ö–∞—Ä—Ç–æ—á–∫–∏ —Ä–æ–∑–¥–∞–Ω—ã! –ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è.\n"
                                           "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞—É–Ω–¥, –Ω–∞–ø–∏—à–∏—Ç–µ /startround")

def get_card_buttons(exclude=[]):
    options = [("–ü—Ä–æ—Ñ–µ—Å—Å–∏—è", "profession"), ("–•–æ–±–±–∏", "hobby"), ("–°–µ–∫—Ä–µ—Ç", "secret"),
               ("–í–æ–∑—Ä–∞—Å—Ç", "age"), ("–ë–∞–≥–∞–∂", "baggage"), ("–ó–¥–æ—Ä–æ–≤—å–µ", "health")]
    buttons = []
    for text, key in options:
        if key not in exclude:
            buttons.append([InlineKeyboardButton(text, callback_data=f"reveal_{key}")])
    return InlineKeyboardMarkup(buttons)

async def startround(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id

    if chat_id not in games or not games[chat_id]["started"]:
        await update.message.reply_text("‚ö†Ô∏è –ò–≥—Ä–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /startgame")
        return

    if len(games[chat_id]["players"]) <= 2:
        await update.message.reply_text("üèÜ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –í –±—É–Ω–∫–µ—Ä –ø–æ–ø–∞–ª–∏ 2 –∏–≥—Ä–æ–∫–∞.")
        await show_winners(chat_id, context)
        del games[chat_id]
        return

    games[chat_id]["round"] += 1
    games[chat_id]["revealed"] = {}
    games[chat_id]["votes"] = defaultdict(set)

    players = games[chat_id]["players"]
    for player_id in players:
        try:
            await context.bot.send_message(
                chat_id=player_id,
                text=f"üîé –†–∞—É–Ω–¥ {games[chat_id]['round']}! –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç—É –¥–ª—è –ø–æ–∫–∞–∑–∞:",
                reply_markup=get_card_buttons()
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç {player_id}: {e}")

    await update.message.reply_text(f"üîî –†–∞—É–Ω–¥ {games[chat_id]['round']} –Ω–∞—á–∞–ª—Å—è! –ò–≥—Ä–æ–∫–∏ –≤—ã–±–∏—Ä–∞—é—Ç –∫–∞—Ä—Ç—ã.")
    asyncio.create_task(round_timer(chat_id, context))

async def round_timer(chat_id, context):
    await asyncio.sleep(60)
    if chat_id not in games:
        return

    revealed = games[chat_id]["revealed"]
    cards_data = games[chat_id]["cards_data"]
    players = games[chat_id]["players"]

    text = f"‚è∞ *–†–∞—É–Ω–¥ {games[chat_id]['round']} –∑–∞–≤–µ—Ä—à—ë–Ω!*\n\n"
    for pid in players:
        player_name = await get_player_name(pid, context)
        if pid in revealed:
            cards_shown = revealed[pid]
            card_texts = [f"‚Ä¢ *{c.capitalize()}*: {cards_data[pid].get(c, '???')}" for c in cards_shown]
            text += f"üë§ *{player_name}:*\n" + "\n".join(card_texts) + "\n\n"
        else:
            text += f"üë§ *{player_name}:* –Ω–µ –ø–æ–∫–∞–∑–∞–ª –∫–∞—Ä—Ç—ã\n\n"

    await context.bot.send_message(chat_id, text, parse_mode="Markdown")
    await start_voting(chat_id, context)

async def start_voting(chat_id, context: ContextTypes.DEFAULT_TYPE):
    if chat_id not in games:
        return
    players = games[chat_id]["players"]
    if len(players) <= 2:
        await context.bot.send_message(chat_id, "üèÜ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –û—Å—Ç–∞–ª–æ—Å—å 2 –∏–≥—Ä–æ–∫–∞.")
        await show_winners(chat_id, context)
        del games[chat_id]
        return

    buttons = []
    for pid in players:
        player_name = await get_player_name(pid, context)
        buttons.append([InlineKeyboardButton(player_name, callback_data=f"vote_{pid}")])

    keyboard = InlineKeyboardMarkup(buttons)

    await context.bot.send_message(
        chat_id,
        "üó≥Ô∏è *–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ:* –≤—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è.",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )

    if games[chat_id]["voting_task"]:
        games[chat_id]["voting_task"].cancel()
    games[chat_id]["voting_task"] = asyncio.create_task(voting_timer(chat_id, context))

async def voting_timer(chat_id, context):
    await asyncio.sleep(30)
    if chat_id not in games:
        return
    await end_voting(chat_id, context)

async def end_voting(chat_id, context):
    votes = games[chat_id]["votes"]
    if not votes:
        await context.bot.send_message(chat_id, "‚ö†Ô∏è –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–µ —Å–æ—Å—Ç–æ—è–ª–æ—Å—å ‚Äî –Ω–∏–∫—Ç–æ –Ω–µ –∏—Å–∫–ª—é—á—ë–Ω.")
        await startround_intern(chat_id, context)
        return

    vote_counts = {player: len(voters) for player, voters in votes.items()}
    max_votes = max(vote_counts.values())
    candidates = [p for p, c in vote_counts.items() if c == max_votes]

    if len(candidates) > 1:
        await context.bot.send_message(chat_id, "ü§ù –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å –Ω–∏—á—å–µ–π ‚Äî –Ω–∏–∫—Ç–æ –Ω–µ –∏—Å–∫–ª—é—á—ë–Ω.")
        await startround_intern(chat_id, context)
        return

    excluded = candidates[0]
    player_name = await get_player_name(excluded, context)

    games[chat_id]["players"].remove(excluded)
    del games[chat_id]["cards_data"][excluded]
    if excluded in games[chat_id]["revealed"]:
        del games[chat_id]["revealed"][excluded]
    if excluded in games[chat_id]["votes"]:
        del games[chat_id]["votes"][excluded]

    await context.bot.send_message(chat_id, f"üö™ –ò–≥—Ä–æ–∫ *{player_name}* –∏—Å–∫–ª—é—á—ë–Ω –∏–∑ –∏–≥—Ä—ã.", parse_mode="Markdown")

    if len(games[chat_id]["players"]) <= 2:
        await context.bot.send_message(chat_id, "üèÜ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –û—Å—Ç–∞–ª–æ—Å—å 2 –∏–≥—Ä–æ–∫–∞.")
        await show_winners(chat_id, context)
        del games[chat_id]
        return

    await startround_intern(chat_id, context)

async def startround_intern(chat_id, context):
    games[chat_id]["round"] += 1
    games[chat_id]["revealed"] = {}
    games[chat_id]["votes"] = defaultdict(set)

    players = games[chat_id]["players"]
    for player_id in players:
        try:
            await context.bot.send_message(
                chat_id=player_id,
                text=f"üîé –†–∞—É–Ω–¥ {games[chat_id]['round']}! –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç—É –¥–ª—è –ø–æ–∫–∞–∑–∞:",
                reply_markup=get_card_buttons()
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç {player_id}: {e}")

    await context.bot.send_message(chat_id, f"üîî –†–∞—É–Ω–¥ {games[chat_id]['round']} –Ω–∞—á–∞–ª—Å—è! –ò–≥—Ä–æ–∫–∏ –≤—ã–±–∏—Ä–∞—é—Ç –∫–∞—Ä—Ç—ã.")
    asyncio.create_task(round_timer(chat_id, context))

async def get_player_name(user_id, context):
    try:
        member = await context.bot.get_chat_member(user_id, user_id)
        return member.user.first_name
    except:
        return "–ò–≥—Ä–æ–∫"

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user = query.from_user
    chat_id = update.effective_chat.id if update.effective_chat else None

    if not chat_id:
        await query.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Ç.")
        return

    if chat_id not in games:
        await query.answer("‚ö†Ô∏è –ò–≥—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.")
        return

    data = query.data

    if data.startswith("reveal_"):
        card_type = data[len("reveal_"):]
        player_id = user.id

        if player_id not in games[chat_id]["players"]:
            await query.answer("‚úã –í—ã –Ω–µ –≤ –∏–≥—Ä–µ!")
            return

        revealed = games[chat_id]["revealed"].setdefault(player_id, [])
        if len(revealed) >= 2:
            await query.answer("‚õî –í—ã —É–∂–µ –ø–æ–∫–∞–∑–∞–ª–∏ 2 –∫–∞—Ä—Ç—ã!")
            return

        if card_type in revealed:
            await query.answer("‚ö†Ô∏è –í—ã —É–∂–µ –ø–æ–∫–∞–∑–∞–ª–∏ —ç—Ç—É –∫–∞—Ä—Ç—É!")
            return

        revealed.append(card_type)
        await query.answer(f"‚úîÔ∏è –í—ã –ø–æ–∫–∞–∑–∞–ª–∏ –∫–∞—Ä—Ç—É: {card_type.capitalize()}")

        if len(revealed) == 1:
            await context.bot.send_message(player_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ç–æ—Ä—É—é –∫–∞—Ä—Ç—É –∏–ª–∏ /skip, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:", reply_markup=get_card_buttons(exclude=revealed))
        else:
            await context.bot.send_message(player_id, "–í—ã –ø–æ–∫–∞–∑–∞–ª–∏ 2 –∫–∞—Ä—Ç—ã, –∂–¥–∏—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞—É–Ω–¥–∞.")

        return

    if data.startswith("vote_"):
        target_id = int(data[len("vote_"):])
        voter_id = user.id

        if voter_id not in games[chat_id]["players"]:
            await query.answer("‚úã –í—ã –Ω–µ –≤ –∏–≥—Ä–µ!")
            return

        if target_id not in games[chat_id]["players"]:
            await query.answer("‚ö†Ô∏è –≠—Ç–æ—Ç –∏–≥—Ä–æ–∫ –Ω–µ –≤ –∏–≥—Ä–µ.")
            return

        if target_id == voter_id:
            await query.answer("‚ùå –ù–µ–ª—å–∑—è –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ —Å–µ–±—è!")
            return

        for voters in games[chat_id]["votes"].values():
            voters.discard(voter_id)
        games[chat_id]["votes"][target_id].add(voter_id)
        await query.answer("üó≥Ô∏è –í—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –∏–≥—Ä–æ–∫
