import os
import random
import json
import asyncio
from collections import defaultdict
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes, CallbackQueryHandler
)

load_dotenv()

with open("cards.json", "r", encoding="utf-8") as f:
    cards = json.load(f)

games = {}  # chat_id -> game data

# –°—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é —Å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞–º–∏
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É", callback_data="create_game")],
        [InlineKeyboardButton("–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ", callback_data="join_game")],
    ]
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –º–µ–Ω—é
async def menu_button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "create_game":
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä—ã
        # –ù—É–∂–Ω–æ —Å—ã–º–∏—Ç–∏—Ä–æ–≤–∞—Ç—å update.message, —á—Ç–æ–±—ã –≤—ã–∑–≤–∞—Ç—å startgame
        # –ü–æ—Å–∫–æ–ª—å–∫—É startgame –∏—Å–ø–æ–ª—å–∑—É–µ—Ç update.message.reply_text, —Å–æ–∑–¥–∞–¥–∏–º –∏–º–∏—Ç–∞—Ü–∏—é
        fake_update = update
        fake_update.message = query.message
        await startgame(fake_update, context)
    elif query.data == "join_game":
        fake_update = update
        fake_update.message = query.message
        await join(fake_update, context)
    else:
        await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")

async def startgame(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id in games and games[chat_id].get("started"):
        await update.message.reply_text("–ò–≥—Ä–∞ —É–∂–µ –∏–¥—ë—Ç!")
        return

    games[chat_id] = {
        "players": [],
        "started": False,
        "round": 0,
        "revealed": {},
        "cards_data": {},
        "votes": defaultdict(set),
        "task": None,
        "voting_task": None,
    }

    await update.message.reply_text(
        "üé≤ –ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞! –ò–≥—Ä–æ–∫–∏, –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /join –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ¬ª.\n"
        "‚è≥ –ò–≥—Ä–∞ –Ω–∞—á–Ω—ë—Ç—Å—è —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥ –∏–ª–∏ —Å—Ä–∞–∑—É, –µ—Å–ª–∏ –Ω–∞–±–µ—Ä—ë—Ç—Å—è 15 –∏–≥—Ä–æ–∫–æ–≤."
    )

    async def wait_and_start():
        await asyncio.sleep(60)
        if chat_id not in games:
            return
        if len(games[chat_id]["players"]) < 5:
            await context.bot.send_message(chat_id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 5). –ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            del games[chat_id]
        else:
            await begin_game(chat_id, context)

    games[chat_id]["task"] = asyncio.create_task(wait_and_start())

async def join(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user = update.effective_user

    if chat_id not in games:
        await update.message.reply_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /startgame –∏–ª–∏ –∫–Ω–æ–ø–∫–æ–π ¬´–°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É¬ª")
        return
    if user.id in games[chat_id]["players"]:
        await update.message.reply_text("–í—ã —É–∂–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å!")
        return

    games[chat_id]["players"].append(user.id)
    await update.message.reply_text(f"‚úÖ {user.first_name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ!")

    if len(games[chat_id]["players"]) == 15:
        await context.bot.send_message(chat_id, "üéâ –ù–∞–±—Ä–∞–Ω–æ 15 –∏–≥—Ä–æ–∫–æ–≤! –ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è.")
        if games[chat_id]["task"]:
            games[chat_id]["task"].cancel()
        await begin_game(chat_id, context)

async def begin_game(chat_id, context: ContextTypes.DEFAULT_TYPE):
    games[chat_id]["started"] = True
    games[chat_id]["round"] = 0
    games[chat_id]["revealed"] = {}
    games[chat_id]["cards_data"] = {}
    games[chat_id]["votes"] = defaultdict(set)
    players = games[chat_id]["players"]
    random.shuffle(players)

    for player_id in players:
        card = {
            "profession": random.choice(cards["professions"]),
            "age": random.choice(cards["ages"]),
            "health": random.choice(cards["healths"]),
            "hobby": random.choice(cards["hobbies"]),
            "baggage": random.choice(cards["baggages"]),
            "secret": random.choice(cards["secrets"]),
        }
        games[chat_id]["cards_data"][player_id] = card
        try:
            await context.bot.send_message(
                chat_id=player_id,
                text=(
                    "üé¥ –í–∞—à–∞ –∫–∞—Ä—Ç–æ—á–∫–∞:\n"
                    f"üë®‚Äçüîß –ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {card['profession']}\n"
                    f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {card['age']}\n"
                    f"‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: {card['health']}\n"
                    f"üé® –•–æ–±–±–∏: {card['hobby']}\n"
                    f"üéí –ë–∞–≥–∞–∂: {card['baggage']}\n"
                    f"üïµÔ∏è –°–µ–∫—Ä–µ—Ç: {card['secret']}\n"
                )
            )
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {player_id}: {e}")

    await context.bot.send_message(chat_id, "üÉè –ö–∞—Ä—Ç–æ—á–∫–∏ —Ä–æ–∑–¥–∞–Ω—ã! –ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è.\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞—É–Ω–¥, –Ω–∞–ø–∏—à–∏—Ç–µ /startround")

def get_card_buttons(exclude=[]):
    options = ["profession", "hobby", "secret", "age", "baggage", "health"]
    buttons = []
    for opt in options:
        if opt not in exclude:
            buttons.append([InlineKeyboardButton(opt.capitalize(), callback_data=f"reveal_{opt}")])
    return InlineKeyboardMarkup(buttons)

async def startround(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id

    if chat_id not in games or not games[chat_id]["started"]:
        await update.message.reply_text("–ò–≥—Ä–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞, —Å–æ–∑–¥–∞–π—Ç–µ –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /startgame –∏–ª–∏ –∫–Ω–æ–ø–∫–æ–π ¬´–°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É¬ª")
        return

    if len(games[chat_id]["players"]) <= 2:
        await update.message.reply_text("–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –í –±—É–Ω–∫–µ—Ä –ø–æ–ø–∞–ª–∏ 2 –∏–≥—Ä–æ–∫–∞.")
        await show_winners(chat_id, context)
        del games[chat_id]
        return

    games[chat_id]["round"] += 1
    games[chat_id]["revealed"] = {}
    games[chat_id]["votes"] = defaultdict(set)

    players = games[chat_id]["players"]
    for player_id in players:
        try:
            await context.bot.send_message(
                chat_id=player_id,
                text=f"–†–∞—É–Ω–¥ {games[chat_id]['round']}!\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç—É –¥–ª—è –ø–æ–∫–∞–∑–∞:",
                reply_markup=get_card_buttons()
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç {player_id}: {e}")

    await update.message.reply_text(f"–†–∞—É–Ω–¥ {games[chat_id]['round']} –Ω–∞—á–∞–ª—Å—è! –ò–≥—Ä–æ–∫–∏ –≤—ã–±–∏—Ä–∞—é—Ç –∫–∞—Ä—Ç—ã.")
    asyncio.create_task(round_timer(chat_id, context))

async def round_timer(chat_id, context):
    await asyncio.sleep(60)
    if chat_id not in games:
        return

    revealed = games[chat_id]["revealed"]
    cards_data = games[chat_id]["cards_data"]
    players = games[chat_id]["players"]

    text = f"‚è∞ –†–∞—É–Ω–¥ {games[chat_id]['round']} –∑–∞–≤–µ—Ä—à—ë–Ω! –í–æ—Ç —Ä–∞—Å–∫—Ä—ã—Ç—ã–µ –∫–∞—Ä—Ç—ã:\n\n"
    for pid in players:
        if pid in revealed:
            cards_shown = revealed[pid]
            card_texts = []
            for c in cards_shown:
                val = cards_data[pid].get(c, "???")
                card_texts.append(f"*{c.capitalize()}*: {val}")
            player_name = await get_player_name(pid, context)
            text += f"üë§ {player_name}:\n" + "\n".join(card_texts) + "\n\n"
        else:
            player_name = await get_player_name(pid, context)
            text += f"üë§ {player_name}: –Ω–µ –ø–æ–∫–∞–∑–∞–ª –∫–∞—Ä—Ç—ã\n\n"

    await context.bot.send_message(chat_id, text, parse_mode="Markdown")
    await start_voting(chat_id, context)

async def start_voting(chat_id, context: ContextTypes.DEFAULT_TYPE):
    if chat_id not in games:
        return
    players = games[chat_id]["players"]
    if len(players) <= 2:
        await context.bot.send_message(chat_id, "–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –û—Å—Ç–∞–ª–æ—Å—å 2 –∏–≥—Ä–æ–∫–∞.")
        await show_winners(chat_id, context)
        del games[chat_id]
        return

    buttons = []
    for pid in players:
        player_name = await get_player_name(pid, context)
        buttons.append([InlineKeyboardButton(player_name, callback_data=f"vote_{pid}")])

    keyboard = InlineKeyboardMarkup(buttons)

    await context.bot.send_message(
        chat_id,
        "üó≥Ô∏è –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ: –≤—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –∏—Å–∫–ª—é—á–∏—Ç—å –∏–∑ –∏–≥—Ä—ã.",
        reply_markup=keyboard
    )

    if games[chat_id]["voting_task"]:
        games[chat_id]["voting_task"].cancel()
    games[chat_id]["voting_task"] = asyncio.create_task(voting_timer(chat_id, context))

async def voting_timer(chat_id, context):
    await asyncio.sleep(30)
    if chat_id not in games:
        return
    await end_voting(chat_id, context)

async def end_voting(chat_id, context):
    votes = games[chat_id]["votes"]
    if not votes:
        await context.bot.send_message(chat_id, "–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–µ —Å–æ—Å—Ç–æ—è–ª–æ—Å—å ‚Äî –Ω–∏–∫—Ç–æ –Ω–µ –∏—Å–∫–ª—é—á—ë–Ω.")
        await startround_intern(chat_id, context)
        return

    vote_counts = {player: len(voters) for player, voters in votes.items()}
    max_votes = max(vote_counts.values())
    candidates = [p for p, c in vote_counts.items() if c == max_votes]

    if len(candidates) > 1:
        await context.bot.send_message(chat_id, "–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å –Ω–∏—á—å–µ–π ‚Äî –Ω–∏–∫—Ç–æ –Ω–µ –∏—Å–∫–ª—é—á—ë–Ω.")
        await startround_intern(chat_id, context)
        return

    excluded = candidates[0]
    player_name = await get_player_name(excluded, context)

    games[chat_id]["players"].remove(excluded)
    del games[chat_id]["cards_data"][excluded]
    if excluded in games[chat_id]["revealed"]:
        del games[chat_id]["revealed"][excluded]
    if excluded in games[chat_id]["votes"]:
        del games[chat_id]["votes"][excluded]

    await context.bot.send_message(chat_id, f"‚ùå –ò—Å–∫–ª—é—á—ë–Ω –∏–≥—Ä–æ–∫ {player_name}!")

    if len(games[chat_id]["players"]) <= 2:
        await context.bot.send_message(chat_id, "–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –û—Å—Ç–∞–ª–æ—Å—å 2 –∏–≥—Ä–æ–∫–∞.")
        await show_winners(chat_id, context)
        del games[chat_id]
    else:
        await startround_intern(chat_id, context)

async def startround_intern(chat_id, context):
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å—Ç–∞—Ä—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
    await asyncio.sleep(10)
    # –°–æ–∑–¥–∞–¥–∏–º –æ–±—ä–µ–∫—Ç update –∏ context –∏–º–∏—Ç–∞—Ü–∏–µ–π? –õ—É—á—à–µ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–º –∫–æ–º–∞–Ω–¥—É startround:
    # –ù–æ –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ –≤—ã–∑–æ–≤–µ–º —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞–ø—Ä—è–º—É—é
    class FakeMessage:
        def __init__(self, chat_id):
            self.chat = type("Chat", (), {"id": chat_id})()
        async def reply_text(self, text, **kwargs):
            await context.bot.send_message(chat_id, text, **kwargs)

    class FakeUpdate:
        def __init__(self, chat_id):
            self.effective_chat = type("Chat", (), {"id": chat_id})()
            self.message = FakeMessage(chat_id)

    fake_update = FakeUpdate(chat_id)
    await startround(fake_update, context)

async def get_player_name(user_id, context):
    try:
        user = await context.bot.get_chat(user_id)
        return user.first_name
    except Exception:
        return str(user_id)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    chat_id = update.effective_chat.id if update.effective_chat else None
    user_id = update.effective_user.id

    if query.data.startswith("reveal_"):
        key = query.data.split("_")[1]
        if chat_id not in games or user_id not in games[chat_id]["players"]:
            await query.edit_message_text("–í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–π –∏–≥—Ä–µ.")
            return
        if user_id not in games[chat_id]["revealed"]:
            games[chat_id]["revealed"][user_id] = []
        if len(games[chat_id]["revealed"][user_id]) >= 2:
            await query.answer("–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ 2 –∫–∞—Ä—Ç—ã.", show_alert=True)
            return
        if key in games[chat_id]["revealed"][user_id]:
            await query.answer("–≠—Ç—É –∫–∞—Ä—Ç—É —É–∂–µ –≤—ã–±—Ä–∞–ª–∏.", show_alert=True)
            return

        games[chat_id]["revealed"][user_id].append(key)

        if len(games[chat_id]["revealed"][user_id]) == 1:
            await query.edit_message_text(
                "–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç—É. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ç–æ—Ä—É—é:",
                reply_markup=get_card_buttons(exclude=[key])
            )
        else:
            await query.edit_message_text("–°–ø–∞—Å–∏–±–æ! –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞—É–Ω–¥–∞.")
    elif query.data.startswith("vote_"):
        target_id = int(query.data.split("_")[1])
        chat_id = update.effective_chat.id
        voter_id = update.effective_user.id

        if chat_id not in games:
            await query.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
            return
        if voter_id not in games[chat_id]["players"]:
            await query.answer("–í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∏–≥—Ä–µ.", show_alert=True)
            return
        if target_id not in games[chat_id]["players"]:
            await query.answer("–≠—Ç–æ—Ç –∏–≥—Ä–æ–∫ —É–∂–µ –∏—Å–∫–ª—é—á—ë–Ω.", show_alert=True)
            return

        # –û–¥–∏–Ω –≥–æ–ª–æ—Å –æ—Ç –∏–≥—Ä–æ–∫–∞ –∑–∞ —Ä–∞—É–Ω–¥
        already_voted = any(voter_id in voters for voters in games[chat_id]["votes"].values())
        if already_voted:
            await query.answer("–í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏.", show_alert=True)
            return

        games[chat_id]["votes"][target_id].add(voter_id)
        await query.answer(f"–í—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞.")

async def show_winners(chat_id, context):
    winners = games[chat_id]["players"]
    names = []
    for pid in winners:
        names.append(await get_player_name(pid, context))
    text = "üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ –∏–≥—Ä—ã:\n" + "\n".join(names)
    await context.bot.send_message(chat_id, text)

def main():
    token = os.getenv("TELEGRAM_BOT_TOKEN")
    if not token:
        print("–û—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
        return

    app = ApplicationBuilder().token(token).build()

    app.add_handler(CommandHandler("start", start))

    # –ö–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é —Å—Ç–∞—Ä—Ç
    app.add_handler(CallbackQueryHandler(menu_button_handler, pattern="^(create_game|join_game)$"))

    app.add_handler(CommandHandler("startgame", startgame))
    app.add_handler(CommandHandler("join", join))
    app.add_handler(CommandHandler("startround", startround))

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç –∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    app.add_handler(CallbackQueryHandler(button_handler, pattern="^(reveal_|vote_).*"))

    print("Bunker bot –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    app.run_polling()

if __name__ == "__main__":
    main()
