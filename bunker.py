import os
import random
import json
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    CallbackQueryHandler,
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env
load_dotenv()

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ –∏–∑ —Ñ–∞–π–ª–∞
with open("cards.json", "r", encoding="utf-8") as f:
    cards = json.load(f)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∏–≥—Ä
games = {}  # chat_id -> {players: [], started: bool}


# === –ö–æ–º–∞–Ω–¥–∞ /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî *Bunker Bot*, –±–æ—Ç –¥–ª—è –∫–∞—Ä—Ç–æ—á–Ω–æ–π —Ä–æ–ª–µ–≤–æ–π –∏–≥—Ä—ã –Ω–∞ –≤—ã–∂–∏–≤–∞–Ω–∏–µ.\n\n"
        "üé≤ –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å:\n"
        "‚Ä¢ –°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ\n"
        "‚Ä¢ –ü–æ–∑–≤–∞—Ç—å –¥—Ä—É–∑–µ–π\n"
        "‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é —Ä–æ–ª—å —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏:\n"
        "  üßë –ü—Ä–æ—Ñ–µ—Å—Å–∏—è\n"
        "  üéÇ –í–æ–∑—Ä–∞—Å—Ç\n"
        "  ‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ\n"
        "  üé® –•–æ–±–±–∏\n"
        "  üéí –ë–∞–≥–∞–∂\n"
        "  üïµÔ∏è –°–µ–∫—Ä–µ—Ç\n\n"
        "üöÄ –ö–∞–∫ –Ω–∞—á–∞—Ç—å:\n"
        "1. –î–æ–±–∞–≤—å –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç\n"
        "2. –í–≤–µ–¥–∏ /startgame\n"
        "3. –ò–≥—Ä–æ–∫–∏ –Ω–∞–∂–∏–º–∞—é—Ç ¬´–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è¬ª\n"
        "4. –ö–æ–≥–¥–∞ –≤—Å–µ –≥–æ—Ç–æ–≤—ã ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´–ù–∞—á–∞—Ç—å –∏–≥—Ä—É¬ª\n"
        "5. –ö–∞—Ä—Ç–æ—á–∫–∏ –ø—Ä–∏–¥—É—Ç –∫–∞–∂–¥–æ–º—É –≤ –ª–∏—á–∫—É ü§´\n\n"
        "–ì–æ—Ç–æ–≤—ã –≤—ã–∂–∏–≤–∞—Ç—å –≤ –±—É–Ω–∫–µ—Ä–µ? –ü–æ–µ—Ö–∞–ª–∏!",
        parse_mode="Markdown"
    )


# === –ö–æ–º–∞–Ω–¥–∞ /startgame ===
async def startgame(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id in games and games[chat_id]["started"]:
        await update.message.reply_text("–ò–≥—Ä–∞ —É–∂–µ –∏–¥—ë—Ç!")
        return
    games[chat_id] = {"players": [], "started": False}

    keyboard = [
        [InlineKeyboardButton("–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", callback_data="join_game")],
        [InlineKeyboardButton("–ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data="begin_game")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "–ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∏–ª–∏ –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É.",
        reply_markup=reply_markup,
    )


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ ===
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    chat_id = query.message.chat.id
    user = query.from_user

    if query.data == "join_game":
        if chat_id not in games:
            await query.edit_message_text("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /startgame")
            return
        if user.id in games[chat_id]["players"]:
            await query.answer("–í—ã —É–∂–µ –≤ –∏–≥—Ä–µ!", show_alert=True)
            return
        games[chat_id]["players"].append(user.id)
        await query.answer(f"{user.first_name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ!")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
        players_names = []
        for player_id in games[chat_id]["players"]:
            try:
                member = await context.bot.get_chat_member(chat_id, player_id)
                players_names.append(member.user.first_name)
            except:
                players_names.append("–ò–≥—Ä–æ–∫")
        await query.edit_message_text(
            "–ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞! –¢–µ–∫—É—â–∏–µ –∏–≥—Ä–æ–∫–∏:\n" + "\n".join(players_names),
            reply_markup=query.message.reply_markup,
        )

    elif query.data == "begin_game":
        if chat_id not in games or not games[chat_id]["players"]:
            await query.answer("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∏–≥—Ä—É –∏ –¥–æ–±–∞–≤—å—Ç–µ –∏–≥—Ä–æ–∫–æ–≤!", show_alert=True)
            return
        if games[chat_id]["started"]:
            await query.answer("–ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å!", show_alert=True)
            return

        games[chat_id]["started"] = True
        players = games[chat_id]["players"]
        random.shuffle(players)

        for player_id in players:
            card = {
                "profession": random.choice(cards["professions"]),
                "age": random.choice(cards["ages"]),
                "health": random.choice(cards["healths"]),
                "hobby": random.choice(cards["hobbies"]),
                "baggage": random.choice(cards["baggages"]),
                "secret": random.choice(cards["secrets"]),
            }
            try:
                await context.bot.send_message(
                    chat_id=player_id,
                    text=(
                        f"üÉè *–í–∞—à–∞ –∫–∞—Ä—Ç–æ—á–∫–∞:*\n"
                        f"–ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {card['profession']}\n"
                        f"–í–æ–∑—Ä–∞—Å—Ç: {card['age']}\n"
                        f"–ó–¥–æ—Ä–æ–≤—å–µ: {card['health']}\n"
                        f"–•–æ–±–±–∏: {card['hobby']}\n"
                        f"–ë–∞–≥–∞–∂: {card['baggage']}\n"
                        f"–°–µ–∫—Ä–µ—Ç: {card['secret']}"
                    ),
                    parse_mode="Markdown"
                )
            except Exception as e:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫—É {player_id}: {e}")

        await query.edit_message_text("‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∏ —Ä–æ–∑–¥–∞–Ω—ã! –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å.")


# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
def main():
    token = os.getenv("TELEGRAM_BOT_TOKEN")
    if not token:
        print("‚ùå –û—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
        return

    app = ApplicationBuilder().token(token).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("startgame", startgame))
    app.add_handler(CallbackQueryHandler(button_handler))

    print("‚úÖ Bunker Bot –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    app.run_polling()


if __name__ == "__main__":
    main()
