import os
import random
import json
import asyncio
from collections import defaultdict
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes, CallbackQueryHandler
)

load_dotenv()

with open("cards.json", "r", encoding="utf-8") as f:
    cards = json.load(f)

games = {}  # chat_id -> game data

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üé≤ –°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É", callback_data="startgame")],
        [InlineKeyboardButton("‚ûï –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", callback_data="join")],
        [InlineKeyboardButton("‚ùì –ü—Ä–∞–≤–∏–ª–∞", callback_data="help")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.message:
        await update.message.reply_text(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî *Bunker Bot*, –∫–∞—Ä—Ç–æ—á–Ω–∞—è –∏–≥—Ä–∞ –Ω–∞ –≤—ã–∂–∏–≤–∞–Ω–∏–µ.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ:",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
    elif update.callback_query:
        await update.callback_query.message.edit_text(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî *Bunker Bot*, –∫–∞—Ä—Ç–æ—á–Ω–∞—è –∏–≥—Ä–∞ –Ω–∞ –≤—ã–∂–∏–≤–∞–Ω–∏–µ.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ:",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )

async def menu_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data
    chat_id = update.effective_chat.id

    await query.answer()

    # –°–æ–∑–¥–∞–µ–º dummy message –¥–ª—è –≤—ã–∑–æ–≤–∞ –∫–æ–º–∞–Ω–¥, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É
    class DummyMessage:
        def __init__(self, chat_id, user):
            self.chat = type('Chat', (), {'id': chat_id})()
            self.from_user = user
        async def reply_text(self, text):
            await context.bot.send_message(chat_id, text)

    dummy_message = DummyMessage(chat_id, query.from_user)
    dummy_update = Update(update.update_id, message=dummy_message)

    if data == "startgame":
        await startgame(dummy_update, context)

    elif data == "join":
        await join(dummy_update, context)

    elif data == "help":
        await query.message.edit_text(
            "‚ùì *–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã Bunker Bot:*\n\n"
            "üéØ –¶–µ–ª—å ‚Äî –ø–æ–ø–∞—Å—Ç—å –≤ –±—É–Ω–∫–µ—Ä, –≥–¥–µ –≤—Å–µ–≥–æ 2 –º–µ—Å—Ç–∞.\n"
            "üÉè –í –∫–∞–∂–¥–æ–º —Ä–∞—É–Ω–¥–µ –∏–≥—Ä–æ–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –∫–∞—Ä—Ç—ã –∏ –≥–æ–ª–æ—Å—É—é—Ç –∑–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ.\n"
            "üöÄ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´–°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É¬ª.\n"
            "‚ûï –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è¬ª.\n"
            "–î–ª—è —Ä—É—á–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã –∫–æ–º–∞–Ω–¥—ã /startgame, /join –∏ /startround.",
            parse_mode="Markdown"
        )

async def startgame(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id in games and games[chat_id].get("started"):
        await update.message.reply_text("–ò–≥—Ä–∞ —É–∂–µ –∏–¥—ë—Ç!")
        return

    games[chat_id] = {
        "players": [],
        "started": False,
        "round": 0,
        "revealed": {},
        "cards_data": {},
        "votes": defaultdict(set),  # target_player_id -> set of voter ids
        "task": None,
        "voting_task": None,
    }

    await update.message.reply_text(
        "üé≤ –ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞! –ò–≥—Ä–æ–∫–∏, –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /join\n"
        "‚è≥ –ò–≥—Ä–∞ –Ω–∞—á–Ω—ë—Ç—Å—è —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥ –∏–ª–∏ —Å—Ä–∞–∑—É, –µ—Å–ª–∏ –Ω–∞–±–µ—Ä—ë—Ç—Å—è 15 –∏–≥—Ä–æ–∫–æ–≤."
    )

    async def wait_and_start():
        await asyncio.sleep(60)
        if chat_id not in games:
            return
        if len(games[chat_id]["players"]) < 5:
            await context.bot.send_message(chat_id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 5). –ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            del games[chat_id]
        else:
            await begin_game(chat_id, context)

    games[chat_id]["task"] = asyncio.create_task(wait_and_start())

async def join(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user = update.effective_user

    if chat_id not in games:
        await update.message.reply_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /startgame")
        return
    if user.id in games[chat_id]["players"]:
        await update.message.reply_text("–í—ã —É–∂–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å!")
        return

    games[chat_id]["players"].append(user.id)
    await update.message.reply_text(f"‚úÖ {user.first_name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ!")

    if len(games[chat_id]["players"]) == 15:
        await context.bot.send_message(chat_id, "üéâ –ù–∞–±—Ä–∞–Ω–æ 15 –∏–≥—Ä–æ–∫–æ–≤! –ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è.")
        if games[chat_id]["task"]:
            games[chat_id]["task"].cancel()
        await begin_game(chat_id, context)

async def begin_game(chat_id, context: ContextTypes.DEFAULT_TYPE):
    games[chat_id]["started"] = True
    games[chat_id]["round"] = 0
    games[chat_id]["revealed"] = {}
    games[chat_id]["cards_data"] = {}
    games[chat_id]["votes"] = defaultdict(set)
    players = games[chat_id]["players"]
    random.shuffle(players)

    for player_id in players:
        card = {
            "profession": random.choice(cards["professions"]),
            "age": random.choice(cards["ages"]),
            "health": random.choice(cards["healths"]),
            "hobby": random.choice(cards["hobbies"]),
            "baggage": random.choice(cards["baggages"]),
            "secret": random.choice(cards["secrets"]),
        }
        games[chat_id]["cards_data"][player_id] = card
        try:
            await context.bot.send_message(
                chat_id=player_id,
                text=(
                    "üé¥ –í–∞—à–∞ –∫–∞—Ä—Ç–æ—á–∫–∞:\n"
                    f"üë®‚Äçüîß –ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {card['profession']}\n"
                    f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {card['age']}\n"
                    f"‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: {card['health']}\n"
                    f"üé® –•–æ–±–±–∏: {card['hobby']}\n"
                    f"üéí –ë–∞–≥–∞–∂: {card['baggage']}\n"
                    f"üïµÔ∏è –°–µ–∫—Ä–µ—Ç: {card['secret']}\n"
                )
            )
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {player_id}: {e}")

    await context.bot.send_message(chat_id, "üÉè –ö–∞—Ä—Ç–æ—á–∫–∏ —Ä–æ–∑–¥–∞–Ω—ã! –ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è.\n"
                                           "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞—É–Ω–¥, –Ω–∞–ø–∏—à–∏—Ç–µ /startround")

def get_card_buttons(exclude=[]):
    options = ["profession", "hobby", "secret", "age", "baggage", "health"]
    buttons = []
    for opt in options:
        if opt not in exclude:
            buttons.append([InlineKeyboardButton(opt.capitalize(), callback_data=f"reveal_{opt}")])
    return InlineKeyboardMarkup(buttons)

async def startround(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id

    if chat_id not in games or not games[chat_id]["started"]:
        await update.message.reply_text("–ò–≥—Ä–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞, —Å–æ–∑–¥–∞–π—Ç–µ –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /startgame")
        return

    if len(games[chat_id]["players"]) <= 2:
        await update.message.reply_text("–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –í –±—É–Ω–∫–µ—Ä –ø–æ–ø–∞–ª–∏ 2 –∏–≥—Ä–æ–∫–∞.")
        await show_winners(chat_id, context)
        del games[chat_id]
        return

    games[chat_id]["round"] += 1
    games[chat_id]["revealed"] = {}
    games[chat_id]["votes"] = defaultdict(set)

    players = games[chat_id]["players"]
    for player_id in players:
        try:
            await context.bot.send_message(
                chat_id=player_id,
                text=f"–†–∞—É–Ω–¥ {games[chat_id]['round']}!\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç—É –¥–ª—è –ø–æ–∫–∞–∑–∞:",
                reply_markup=get_card_buttons()
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç {player_id}: {e}")

    await update.message.reply_text(f"–†–∞—É–Ω–¥ {games[chat_id]['round']} –Ω–∞—á–∞–ª—Å—è! –ò–≥—Ä–æ–∫–∏ –≤—ã–±–∏—Ä–∞—é—Ç –∫–∞—Ä—Ç—ã.")
    asyncio.create_task(round_timer(chat_id, context))

async def round_timer(chat_id, context):
    await asyncio.sleep(60)
    if chat_id not in games:
        return

    revealed = games[chat_id]["revealed"]
    cards_data = games[chat_id]["cards_data"]
    players = games[chat_id]["players"]

    text = f"‚è∞ –†–∞—É–Ω–¥ {games[chat_id]['round']} –∑–∞–≤–µ—Ä—à—ë–Ω! –í–æ—Ç —Ä–∞—Å–∫—Ä—ã—Ç—ã–µ –∫–∞—Ä—Ç—ã:\n\n"
    for pid in players:
        if pid in revealed:
            cards_shown = revealed[pid]
            card_texts = []
            for c in cards_shown:
                val = cards_data[pid].get(c, "???")
                card_texts.append(f"*{c.capitalize()}*: {val}")
            player_name = await get_player_name(pid, context)
            text += f"üë§ {player_name}:\n" + "\n".join(card_texts) + "\n\n"
        else:
            player_name = await get_player_name(pid, context)
            text += f"üë§ {player_name}: –Ω–µ –ø–æ–∫–∞–∑–∞–ª –∫–∞—Ä—Ç—ã\n\n"

    await context.bot.send_message(chat_id, text, parse_mode="Markdown")
    await start_voting(chat_id, context)

async def start_voting(chat_id, context: ContextTypes.DEFAULT_TYPE):
    if chat_id not in games:
        return
    players = games[chat_id]["players"]
    if len(players) <= 2:
        await context.bot.send_message(chat_id, "–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –û—Å—Ç–∞–ª–æ—Å—å 2 –∏–≥—Ä–æ–∫–∞.")
        await show_winners(chat_id, context)
        del games[chat_id]
        return

    buttons = []
    for pid in players:
        player_name = await get_player_name(pid, context)
        buttons.append([InlineKeyboardButton(player_name, callback_data=f"vote_{pid}")])

    markup = InlineKeyboardMarkup(buttons)
    await context.bot.send_message(chat_id, "üó≥ –ì–æ–ª–æ—Å—É–π—Ç–µ, –∫–æ–≥–æ –∏—Å–∫–ª—é—á–∏—Ç—å:", reply_markup=markup)

    # –¢–∞–π–º–µ—Ä –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä 60 —Å–µ–∫)
    games[chat_id]["voting_task"] = asyncio.create_task(voting_timer(chat_id, context))

async def voting_timer(chat_id, context):
    await asyncio.sleep(60)
    if chat_id not in games:
        return

    votes = games[chat_id]["votes"]
    players = games[chat_id]["players"]

    # –ü–æ–¥—Å—á—ë—Ç –≥–æ–ª–æ—Å–æ–≤
    max_votes = 0
    excluded_player = None
    for pid, voter_set in votes.items():
        if len(voter_set) > max_votes:
            max_votes = len(voter_set)
            excluded_player = pid

    if excluded_player:
        player_name = await get_player_name(excluded_player, context)
        await context.bot.send_message(chat_id, f"‚ùå –ò–≥—Ä–æ–∫ {player_name} –∏—Å–∫–ª—é—á—ë–Ω –∏–∑ –∏–≥—Ä—ã.")
        games[chat_id]["players"].remove(excluded_player)
        del games[chat_id]["cards_data"][excluded_player]
    else:
        await context.bot.send_message(chat_id, "üîî –ù–∏–∫—Ç–æ –Ω–µ –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥–æ–ª–æ—Å–æ–≤. –ò—Å–∫–ª—é—á–µ–Ω–∏–π –Ω–µ—Ç.")

    # –û—á–∏—Å—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤ –∏ —Ä–∞—Å–∫—Ä—ã—Ç—ã—Ö –∫–∞—Ä—Ç –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞
    games[chat_id]["votes"] = defaultdict(set)
    games[chat_id]["revealed"] = {}

    # –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    if len(games[chat_id]["players"]) > 2:
        await context.bot.send_message(chat_id, "‚è≥ –°–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è...")
        await startround(Update(update_id=0, message=DummyMessage(chat_id, None)), context)
    else:
        await context.bot.send_message(chat_id, "–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –û—Å—Ç–∞–ª–æ—Å—å 2 –∏–≥—Ä–æ–∫–∞.")
        await show_winners(chat_id, context)
        del games[chat_id]

async def show_winners(chat_id, context):
    if chat_id not in games:
        return
    players = games[chat_id]["players"]
    winners = []
    for pid in players:
        player_name = await get_player_name(pid, context)
        winners.append(player_name)
    text = "üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ ‚Äî –∏–≥—Ä–æ–∫–∏, –ø–æ–ø–∞–≤—à–∏–µ –≤ –±—É–Ω–∫–µ—Ä:\n" + "\n".join(winners)
    await context.bot.send_message(chat_id, text)

async def get_player_name(user_id, context):
    try:
        user = await context.bot.get_chat(user_id)
        return user.first_name or str(user_id)
    except Exception:
        return str(user_id)

async def reveal_card(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    data = query.data

    await query.answer()

    if chat_id not in games or not games[chat_id]["started"]:
        await query.message.reply_text("–ò–≥—Ä–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞.")
        return

    if user_id not in games[chat_id]["players"]:
        await query.message.reply_text("–í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–π –∏–≥—Ä–µ.")
        return

    card_type = data.split("_")[1]
    revealed = games[chat_id]["revealed"].setdefault(user_id, [])
    if card_type in revealed:
        await query.message.reply_text("–≠—Ç–∞ –∫–∞—Ä—Ç–∞ —É–∂–µ —Ä–∞—Å–∫—Ä—ã—Ç–∞.")
        return

    revealed.append(card_type)
    card = games[chat_id]["cards_data"][user_id]
    value = card.get(card_type, "???")
    await query.message.reply_text(f"üîç –í–∞—à–∞ –∫–∞—Ä—Ç–∞ ‚Äî *{card_type.capitalize()}*: {value}", parse_mode="Markdown")

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ä–∞—Å–∫—Ä—ã—Ç—å –µ—â–µ, –µ—Å–ª–∏ –º–µ–Ω—å—à–µ 2
    if len(revealed) < 2:
        await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –µ—â—ë –∫–∞—Ä—Ç—É –¥–ª—è –ø–æ–∫–∞–∑–∞:", reply_markup=get_card_buttons(exclude=revealed))
    else:
        await query.message.reply_text("–í—ã —Ä–∞—Å–∫—Ä—ã–ª–∏ 2 –∫–∞—Ä—Ç—ã, –∂–¥–∏—Ç–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö.")

async def vote_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    data = query.data

    await query.answer()

    if chat_id not in games or not games[chat_id]["started"]:
        await query.message.reply_text("–ò–≥—Ä–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞.")
        return

    if user_id not in games[chat_id]["players"]:
        await query.message.reply_text("–í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–π –∏–≥—Ä–µ.")
        return

    target_id = int(data.split("_")[1])
    if target_id == user_id:
        await query.message.reply_text("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ —Å–µ–±—è.")
        return

    votes = games[chat_id]["votes"]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    for voters in votes.values():
        if user_id in voters:
            await query.message.reply_text("–í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏.")
            return

    votes[target_id].add(user_id)
    player_name = await get_player_name(target_id, context)
    await query.message.reply_text(f"–í—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ {player_name}.")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ùì *–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã Bunker Bot:*\n\n"
        "üéØ –¶–µ–ª—å ‚Äî –ø–æ–ø–∞—Å—Ç—å –≤ –±—É–Ω–∫–µ—Ä, –≥–¥–µ –≤—Å–µ–≥–æ 2 –º–µ—Å—Ç–∞.\n"
        "üÉè –í –∫–∞–∂–¥–æ–º —Ä–∞—É–Ω–¥–µ –∏–≥—Ä–æ–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –∫–∞—Ä—Ç—ã –∏ –≥–æ–ª–æ—Å—É—é—Ç –∑–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ.\n"
        "üöÄ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´–°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É¬ª –∏–ª–∏ /startgame.\n"
        "‚ûï –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è¬ª –∏–ª–∏ /join.\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞—É–Ω–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /startround.",
        parse_mode="Markdown"
    )

class DummyMessage:
    def __init__(self, chat_id, user):
        self.chat = type('Chat', (), {'id': chat_id})()
        self.from_user = user

    async def reply_text(self, text):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º bot.send_message –Ω–∞–ø—Ä—è–º—É—é, —Ç.–∫. —ç—Ç–æ —ç–º—É–ª—è—Ü–∏—è
        pass

def main():
    application = ApplicationBuilder().token(os.getenv("BOT_TOKEN")).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("startgame", startgame))
    application.add_handler(CommandHandler("join", join))
    application.add_handler(CommandHandler("startround", startround))
    application.add_handler(CommandHandler("help", help_command))

    application.add_handler(CallbackQueryHandler(menu_callback_handler, pattern="^(startgame|join|help)$"))
    application.add_handler(CallbackQueryHandler(reveal_card, pattern="^reveal_"))
    application.add_handler(CallbackQueryHandler(vote_handler, pattern="^vote_"))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    application.run_polling()

if __name__ == "__main__":
    main()
